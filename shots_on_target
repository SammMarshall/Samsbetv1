import json
import requests
import time

# Carregar o arquivo JSON com codificação UTF-8
try:
    with open('all_leagues_info.json', 'r', encoding='utf-8') as file:
        leagues_data = json.load(file)
except UnicodeDecodeError:
    # Se UTF-8 falhar, tente com ISO-8859-1
    with open('all_leagues_info.json', 'r', encoding='iso-8859-1') as file:
        leagues_data = json.load(file)

# Função para obter os nomes dos times
def get_event_details(event_id):
    url = f"https://www.sofascore.com/api/v1/event/{event_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json()
        home_team = data['event']['homeTeam']['name']
        away_team = data['event']['awayTeam']['name']
        return home_team, away_team
    else:
        print(f"Erro ao obter detalhes do evento {event_id}")
        return 'Time da casa desconhecido', 'Time de fora desconhecido'

# Função para obter as estatísticas de chutes no gol
def get_shots_on_target(event_id):
    url = f"https://www.sofascore.com/api/v1/event/{event_id}/lineups"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json()
        shots_on_target = {'home': [], 'away': []}
        
        for team_type in ['home', 'away']:
            if team_type in data:
                for player in data[team_type]['players']:
                    name = player['player']['name']
                    shots = player['statistics'].get('onTargetScoringAttempt', 0)
                    if shots > 0:
                        shots_on_target[team_type].append({'name': name, 'shots': shots})
        
        return shots_on_target
    else:
        print(f"Erro ao obter dados para o evento {event_id}")
        return {'home': [], 'away': []}

# Obter os times da Premier League
premier_league_teams = leagues_data.get('Premier League', {}).get('teams', [])

for team in premier_league_teams:
    team_name = team['nome']
    last_event_id = team['lastEvent']['id']
    
    home_team, away_team = get_event_details(last_event_id)
    
    print(f"\nConfronto: {home_team} vs {away_team}")
    print(f"ID do evento: {last_event_id}")
    
    shots_data = get_shots_on_target(last_event_id)
    
    if shots_data['home'] or shots_data['away']:
        print(f"\nJogadores do {home_team} (casa) com chutes no gol:")
        if shots_data['home']:
            for player in shots_data['home']:
                print(f"- {player['name']}: {player['shots']} chute(s)")
        else:
            print("Nenhum chute no gol registrado.")
        
        print(f"\nJogadores do {away_team} (fora) com chutes no gol:")
        if shots_data['away']:
            for player in shots_data['away']:
                print(f"- {player['name']}: {player['shots']} chute(s)")
        else:
            print("Nenhum chute no gol registrado.")
    else:
        print("Nenhum dado de chute no gol encontrado ou erro na requisição.")
    
    print("\n" + "="*50)  # Separador entre confrontos
    
    # Intervalo de 5 segundos entre as requisições
    time.sleep(5)

if not premier_league_teams:
    print("Nenhum time da Premier League encontrado no JSON.")
